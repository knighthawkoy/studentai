{"ast":null,"code":"export default function checkDuplicateRouteNames(state) {\n  const duplicates = [];\n  const getRouteNames = (location, state) => {\n    state.routes.forEach(route => {\n      var _route$state, _route$state$routeNam;\n      const currentLocation = location ? \"\".concat(location, \" > \").concat(route.name) : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(routeName => {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, \"\".concat(currentLocation, \" > \").concat(route.name)]);\n        }\n      });\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n  getRouteNames('', state);\n  return duplicates;\n}","map":{"version":3,"names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","_route$state","_route$state$routeNam","currentLocation","concat","name","routeNames","routeName","push"],"sources":["/opt/projects/studentai/app/webapp/node_modules/@react-navigation/core/src/checkDuplicateRouteNames.tsx"],"sourcesContent":["import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: (typeof state.routes)[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n"],"mappings":"AAEA,eAAe,SAASA,wBAAwBA,CAACC,KAAsB,EAAE;EACvE,MAAMC,UAAsB,GAAG,EAAE;EAEjC,MAAMC,aAAa,GAAGA,CACpBC,QAAgB,EAChBH,KAAsD,KACnD;IACHA,KAAK,CAACI,MAAM,CAACC,OAAO,CAAEC,KAA+B,IAAK;MAAA,IAAAC,YAAA,EAAAC,qBAAA;MACxD,MAAMC,eAAe,GAAGN,QAAQ,MAAAO,MAAA,CACzBP,QAAS,SAAAO,MAAA,CAAKJ,KAAK,CAACK,IAAK,IAC5BL,KAAK,CAACK,IAAI;MAEd,CAAAJ,YAAA,GAAAD,KAAK,CAACN,KAAK,cAAAO,YAAA,wBAAAC,qBAAA,GAAXD,YAAA,CAAaK,UAAU,cAAAJ,qBAAA,uBAAvBA,qBAAA,CAAyBH,OAAO,CAAEQ,SAAS,IAAK;QAC9C,IAAIA,SAAS,KAAKP,KAAK,CAACK,IAAI,EAAE;UAC5BV,UAAU,CAACa,IAAI,CAAC,CACdL,eAAe,KAAAC,MAAA,CACZD,eAAgB,SAAAC,MAAA,CAAKJ,KAAK,CAACK,IAAK,EACpC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,IAAIL,KAAK,CAACN,KAAK,EAAE;QACfE,aAAa,CAACO,eAAe,EAAEH,KAAK,CAACN,KAAK,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ,CAAC;EAEDE,aAAa,CAAC,EAAE,EAAEF,KAAK,CAAC;EAExB,OAAOC,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}