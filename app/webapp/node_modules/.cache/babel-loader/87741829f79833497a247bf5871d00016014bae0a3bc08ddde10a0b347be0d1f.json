{"ast":null,"code":"import _defineProperty from \"/opt/projects/studentai/app/webapp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport Color from 'color';\nimport * as React from 'react';\nimport { Animated, InteractionManager, Platform, StyleSheet, View } from 'react-native';\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet from './CardSheet';\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\nconst hasOpacityStyle = style => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nexport default class Card extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"isCurrentlyMounted\", false);\n    _defineProperty(this, \"isClosing\", new Animated.Value(FALSE));\n    _defineProperty(this, \"inverted\", new Animated.Value(getInvertedMultiplier(this.props.gestureDirection)));\n    _defineProperty(this, \"layout\", {\n      width: new Animated.Value(this.props.layout.width),\n      height: new Animated.Value(this.props.layout.height)\n    });\n    _defineProperty(this, \"isSwiping\", new Animated.Value(FALSE));\n    _defineProperty(this, \"animate\", _ref2 => {\n      let {\n        closing,\n        velocity\n      } = _ref2;\n      const {\n        gesture,\n        transitionSpec,\n        onOpen,\n        onClose,\n        onTransition\n      } = this.props;\n      const toValue = this.getAnimateToValue({\n        ...this.props,\n        closing\n      });\n      this.lastToValue = toValue;\n      this.isClosing.setValue(closing ? TRUE : FALSE);\n      const spec = closing ? transitionSpec.close : transitionSpec.open;\n      const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      this.setPointerEventsEnabled(!closing);\n      this.handleStartInteraction();\n      clearTimeout(this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, {\n        ...spec.config,\n        velocity,\n        toValue,\n        useNativeDriver,\n        isInteraction: false\n      }).start(_ref3 => {\n        let {\n          finished\n        } = _ref3;\n        this.handleEndInteraction();\n        clearTimeout(this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (this.isCurrentlyMounted) {\n            // Make sure to re-open screen if it wasn't removed\n            this.forceUpdate();\n          }\n        }\n      });\n    });\n    _defineProperty(this, \"getAnimateToValue\", _ref4 => {\n      let {\n        closing,\n        layout,\n        gestureDirection\n      } = _ref4;\n      if (!closing) {\n        return 0;\n      }\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n    _defineProperty(this, \"setPointerEventsEnabled\", enabled => {\n      var _this$ref$current;\n      const pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$ref$current = this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.setPointerEvents(pointerEvents);\n    });\n    _defineProperty(this, \"handleStartInteraction\", () => {\n      if (this.interactionHandle === undefined) {\n        this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(this, \"handleEndInteraction\", () => {\n      if (this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(this, \"handleGestureStateChange\", _ref5 => {\n      let {\n        nativeEvent\n      } = _ref5;\n      const {\n        layout,\n        onClose,\n        onGestureBegin,\n        onGestureCanceled,\n        onGestureEnd,\n        gestureDirection,\n        gestureVelocityImpact\n      } = this.props;\n      switch (nativeEvent.state) {\n        case GestureState.ACTIVE:\n          this.isSwiping.setValue(TRUE);\n          this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n        case GestureState.CANCELLED:\n          {\n            this.isSwiping.setValue(FALSE);\n            this.handleEndInteraction();\n            const velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            this.animate({\n              closing: this.props.closing,\n              velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n        case GestureState.END:\n          {\n            this.isSwiping.setValue(FALSE);\n            let distance;\n            let translation;\n            let velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              velocity = nativeEvent.velocityX;\n            }\n            const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? velocity !== 0 || translation !== 0 : this.props.closing;\n            this.animate({\n              closing,\n              velocity\n            });\n            if (closing) {\n              // We call onClose with a delay to make sure that the animation has already started\n              // This will make sure that the state update caused by this doesn't affect start of animation\n              this.pendingGestureCallback = setTimeout(() => {\n                onClose();\n\n                // Trigger an update after we dispatch the action to remove the screen\n                // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n                this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n    // Memoize this to avoid extra work on re-render\n    _defineProperty(this, \"getInterpolatedStyle\", memoize((styleInterpolator, animation) => styleInterpolator(animation)));\n    // Keep track of the animation context when deps changes.\n    _defineProperty(this, \"getCardAnimation\", memoize((interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n      index: interpolationIndex,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n    _defineProperty(this, \"ref\", /*#__PURE__*/React.createRef());\n  }\n  componentDidMount() {\n    this.animate({\n      closing: this.props.closing\n    });\n    this.isCurrentlyMounted = true;\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      layout,\n      gestureDirection,\n      closing\n    } = this.props;\n    const {\n      width,\n      height\n    } = layout;\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n    const toValue = this.getAnimateToValue(this.props);\n    if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({\n        closing\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n  gestureActivationCriteria() {\n    const {\n      layout,\n      gestureDirection,\n      gestureResponseDistance\n    } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n    const distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: {\n          bottom: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: {\n          top: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: {\n            right: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: {\n            left: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      }\n    }\n  }\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n    const interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle\n    } = interpolatedStyle;\n    const handleGestureEvent = gestureEnabled ? Animated.event([{\n      nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n        translationY: gesture\n      } : {\n        translationX: gesture\n      }\n    }], {\n      useNativeDriver\n    }) : undefined;\n    const {\n      backgroundColor\n    } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n    return /*#__PURE__*/React.createElement(CardAnimationContext.Provider, {\n      value: interpolationProps\n    },\n    // StatusBar messes with translucent status bar on Android\n    // So we should only enable it on iOS\n    Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? /*#__PURE__*/React.createElement(ModalStatusBarManager, {\n      dark: headerDarkContent,\n      layout: layout,\n      insets: insets,\n      style: cardStyle\n    }) : null, /*#__PURE__*/React.createElement(Animated.View, {\n      style: {\n        // This is a dummy style that doesn't actually change anything visually.\n        // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n        // If we disable animations and hide header, it could end up making the value unused.\n        // So we have this dummy style that will always be used regardless of what else changed.\n        opacity: current\n      }\n      // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n      ,\n\n      collapsable: false\n    }), /*#__PURE__*/React.createElement(View, _extends({\n      pointerEvents: \"box-none\"\n    }, rest), overlayEnabled ? /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"box-none\",\n      style: StyleSheet.absoluteFill\n    }, overlay({\n      style: overlayStyle\n    })) : null, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.container, containerStyle, customContainerStyle],\n      pointerEvents: \"box-none\"\n    }, /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n      enabled: layout.width !== 0 && gestureEnabled,\n      onGestureEvent: handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange\n    }, this.gestureActivationCriteria()), /*#__PURE__*/React.createElement(Animated.View, {\n      needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n      style: [styles.container, cardStyle]\n    }, shadowEnabled && shadowStyle && !isTransparent ? /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n        backgroundColor\n      }, shadowStyle],\n      pointerEvents: \"none\"\n    }) : null, /*#__PURE__*/React.createElement(CardSheet, {\n      ref: this.ref,\n      enabled: pageOverflowEnabled,\n      layout: layout,\n      style: contentStyle\n    }, children))))));\n  }\n}\n_defineProperty(Card, \"defaultProps\", {\n  shadowEnabled: false,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: _ref => {\n    let {\n      style\n    } = _ref;\n    return style ? /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\nexport const getIsModalPresentation = cardStyleInterpolator => {\n  return cardStyleInterpolator === forModalPresentationIOS ||\n  // Handle custom modal presentation interpolators as well\n  cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"names":["Color","React","Animated","InteractionManager","Platform","StyleSheet","View","forModalPresentationIOS","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GestureState","PanGestureHandler","ModalStatusBarManager","CardSheet","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","OS","hasOpacityStyle","style","flattenedStyle","flatten","opacity","Card","Component","constructor","arguments","_defineProperty","Value","props","gestureDirection","width","layout","height","_ref2","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","toValue","getAnimateToValue","lastToValue","isClosing","setValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","_ref3","finished","handleEndInteraction","isCurrentlyMounted","forceUpdate","_ref4","enabled","_this$ref$current","pointerEvents","ref","current","setPointerEvents","interactionHandle","createInteractionHandle","clearInteractionHandle","_ref5","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","ACTIVE","isSwiping","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","interpolationIndex","next","insetTop","insetRight","insetBottom","insetLeft","index","progress","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","stopAnimation","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","headerDarkContent","children","containerStyle","customContainerStyle","contentStyle","rest","interpolationProps","getCardAnimation","interpolatedStyle","getInterpolatedStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","createElement","Provider","value","getIsModalPresentation","dark","collapsable","_extends","absoluteFill","styles","container","onGestureEvent","onHandlerStateChange","handleGestureStateChange","needsOffscreenAlphaCompositing","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","_ref","cardStyleInterpolator","name","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["/opt/projects/studentai/app/webapp/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx"],"sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet, { CardSheetRef } from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation<number>;\n  current: Animated.AnimatedInterpolation<number>;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  headerDarkContent: boolean | undefined;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { gesture, transitionSpec, onOpen, onClose, onTransition } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.ref.current?.setPointerEvents(pointerEvents);\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation<number>,\n      next: Animated.AnimatedInterpolation<number> | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private ref = React.createRef<CardSheetRef>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        {\n          // StatusBar messes with translucent status bar on Android\n          // So we should only enable it on iOS\n          Platform.OS === 'ios' &&\n          overlayEnabled &&\n          next &&\n          getIsModalPresentation(styleInterpolator) ? (\n            <ModalStatusBarManager\n              dark={headerDarkContent}\n              layout={layout}\n              insets={insets}\n              style={cardStyle}\n            />\n          ) : null\n        }\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.ref}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nexport const getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}