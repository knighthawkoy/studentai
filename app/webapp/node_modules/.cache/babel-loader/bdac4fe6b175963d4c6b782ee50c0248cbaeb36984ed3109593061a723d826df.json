{"ast":null,"code":"import _defineProperty from \"/opt/projects/studentai/app/webapp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\nconst GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);\nexport default class StackView extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(this, \"getPreviousRoute\", _ref2 => {\n      let {\n        route\n      } = _ref2;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      const routes = this.state.routes.filter(r => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));\n      const index = routes.findIndex(r => r.key === route.key);\n      return routes[index - 1];\n    });\n    _defineProperty(this, \"renderScene\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const descriptor = this.state.descriptors[route.key] || this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      return descriptor.render();\n    });\n    _defineProperty(this, \"renderHeader\", props => {\n      return /*#__PURE__*/React.createElement(HeaderContainer, props);\n    });\n    _defineProperty(this, \"handleOpenRoute\", _ref4 => {\n      let {\n        route\n      } = _ref4;\n      const {\n        state,\n        navigation\n      } = this.props;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      if (closingRouteKeys.some(key => key === route.key) && replacingRouteKeys.every(key => key !== route.key) && state.routeNames.includes(route.name) && !state.routes.some(r => r.key === route.key)) {\n        // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n        // So we need to add this route back to the state\n        navigation.navigate(route);\n      } else {\n        this.setState(state => ({\n          routes: state.replacingRouteKeys.length ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key)) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n          replacingRouteKeys: []\n        }));\n      }\n    });\n    _defineProperty(this, \"handleCloseRoute\", _ref5 => {\n      let {\n        route\n      } = _ref5;\n      const {\n        state,\n        navigation\n      } = this.props;\n      if (state.routes.some(r => r.key === route.key)) {\n        // If a route exists in state, trigger a pop\n        // This will happen in when the route was closed from the card component\n        // e.g. When the close animation triggered from a gesture ends\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: route.key,\n          target: state.key\n        });\n      } else {\n        // We need to clean up any state tracking the route and pop it immediately\n        this.setState(state => ({\n          routes: state.routes.filter(r => r.key !== route.key),\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key)\n        }));\n      }\n    });\n    _defineProperty(this, \"handleTransitionStart\", (_ref6, closing) => {\n      let {\n        route\n      } = _ref6;\n      return this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleTransitionEnd\", (_ref7, closing) => {\n      let {\n        route\n      } = _ref7;\n      return this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureStart\", _ref8 => {\n      let {\n        route\n      } = _ref8;\n      this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureEnd\", _ref9 => {\n      let {\n        route\n      } = _ref9;\n      this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureCancel\", _ref10 => {\n      let {\n        route\n      } = _ref10;\n      this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n  }\n  static getDerivedStateFromProps(props, state) {\n    // If there was no change in routes, we don't need to compute anything\n    if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(r => r.key), state.previousRoutes.map(r => r.key))) && state.routes.length) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce((acc, route) => {\n          acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n          return acc;\n        }, {});\n        previousDescriptors = props.descriptors;\n      }\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce((acc, route) => {\n          acc[route.key] = route;\n          return acc;\n        }, {});\n        routes = state.routes.map(route => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes = props.state.index < props.state.routes.length - 1 ?\n    // Remove any extra routes from the state\n    // The last visible route should be the focused route, i.e. at current index\n    props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes\n    } = state;\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n    const nextFocusedRoute = routes[routes.length - 1];\n    const isAnimationEnabled = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n    const getAnimationTypeForReplace = key => {\n      var _descriptor$options$a;\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n    };\n    if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n          closingRouteKeys = closingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];\n              closingRouteKeys = closingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(routes.length - 1, 0, ...state.routes.filter(_ref => {\n        let {\n          key\n        } = _ref;\n        return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n      }));\n    }\n    if (!routes.length) {\n      throw new Error('There should always be at least one route in the navigation state.');\n    }\n    const descriptors = routes.reduce((acc, route) => {\n      acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n      return acc;\n    }, {});\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors\n    };\n  }\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys\n    } = this.state;\n    return /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n      style: styles.container\n    }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => /*#__PURE__*/React.createElement(ModalPresentationContext.Consumer, null, isParentModal => /*#__PURE__*/React.createElement(HeaderShownContext.Consumer, null, isParentHeaderShown => /*#__PURE__*/React.createElement(CardStack, _extends({\n      insets: insets,\n      isParentHeaderShown: isParentHeaderShown,\n      isParentModal: isParentModal,\n      getPreviousRoute: this.getPreviousRoute,\n      routes: routes,\n      openingRouteKeys: openingRouteKeys,\n      closingRouteKeys: closingRouteKeys,\n      onOpenRoute: this.handleOpenRoute,\n      onCloseRoute: this.handleCloseRoute,\n      onTransitionStart: this.handleTransitionStart,\n      onTransitionEnd: this.handleTransitionEnd,\n      renderHeader: this.renderHeader,\n      renderScene: this.renderScene,\n      state: state,\n      descriptors: descriptors,\n      onGestureStart: this.handleGestureStart,\n      onGestureEnd: this.handleGestureEnd,\n      onGestureCancel: this.handleGestureCancel\n    }, rest)))))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["HeaderShownContext","SafeAreaProviderCompat","StackActions","React","StyleSheet","View","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","constructor","arguments","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","_ref2","route","state","filter","r","key","includes","findIndex","_ref3","descriptor","props","render","createElement","_ref4","navigation","some","routeNames","name","navigate","setState","_ref5","dispatch","pop","source","target","_ref6","closing","emit","type","data","_ref7","_ref8","_ref9","_ref10","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","options","animationEnabled","getAnimationTypeForReplace","_descriptor$options$a","animationTypeForReplace","splice","_ref","Error","_","rest","style","styles","container","Consumer","insets","isParentModal","isParentHeaderShown","_extends","getPreviousRoute","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","onTransitionStart","handleTransitionStart","onTransitionEnd","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","create","flex"],"sources":["/opt/projects/studentai/app/webapp/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}